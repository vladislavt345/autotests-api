# Имя workflow, которое будет отображаться в интерфейсе GitHub Actions
name: API tests

# Указываем, когда будет запускаться данный workflow
on:
  push:
    branches:
      - main  # Запускать workflow, когда будет сделан коммит в ветку main
  pull_request:
    branches:
      - main  # Запускать workflow, когда будет сделан pull request в ветку main

jobs:
  # 1 jobs: выполняет автотесты
  run-tests:
    runs-on: ubuntu-latest  # Указываем, что тесты будут запускаться на последней версии Ubuntu

    steps:
      # 1. Шаг, который будет клонировать ваш репозиторий на машину GitHub Actions
      - name: Check out repository
        uses: actions/checkout@v4  # Используем GitHub Action для клонирования репозитория

      # 2. Шаг для установки Python на виртуальной машине
      - name: Set up Python
        uses: actions/setup-python@v5  # Используем GitHub Action для установки Python
        with:
          python-version: '3.12'  # Устанавливаем версию Python (в данном случае 3.12)

      # 3. Шаг для клонирования репозитория с тестовым сервером в рабочую среду
      - name: Clone test server repository
        run: git clone https://github.com/Nikita-Filonov/qa-automation-engineer-api-course.git

      # 4. Шаг для установки зависимостей для тестового сервера
      - name: Install test server dependencies
        run: pip install -r qa-automation-engineer-api-course/requirements.txt

      # 5. Шаг для запуска тестового сервера с необходимыми переменными окружения
      - name: Start a test server
        env:
          APP_HOST: "http://localhost:8000"  # Устанавливаем адрес хоста сервера
          DATABASE_URL: "sqlite+aiosqlite:///./local.db"  # Устанавливаем URL локальной базы данных
          JWT_ALGORITHM: "HS256"  # Алгоритм для JWT токенов
          JWT_SECRET_KEY: "qa-automation-engineer-api-course-secret-key"  # Секретный ключ для JWT
          JWT_ACCESS_TOKEN_EXPIRE: 1800  # Время жизни access token (в секундах)
          JWT_REFRESH_TOKEN_EXPIRE: 5184000  # Время жизни refresh token (в секундах)
        run: uvicorn main:app --host 0.0.0.0 --port 8000 --app-dir ./qa-automation-engineer-api-course &

      # 6. Шаг для установки всех зависимостей проекта
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Обновляем pip до последней версии
          pip install -r requirements.txt  # Устанавливаем зависимости, указанные в requirements.txt

      # 7. Шаг для запуска тестов с использованием pytest и генерации отчётов Allure
      - name: Run API tests with pytest and generate Allure results
        run: |
          pytest -m regression --alluredir=allure-results --numprocesses=2  # Запускаем тесты, отмеченные как "regression", генерируем результаты для Allure

      # 8. Восстанавливаем историю покрытия из кеша
      - name: Restore Coverage history
        uses: actions/cache/restore@v4
        with:
          path: coverage-history.json
          key: coverage-history-${{ github.run_id }}
          restore-keys: |
            coverage-history-

      # 9. Генерируем HTML-отчет и обновляем историю
      - name: Generate Coverage report
        run: |
          swagger-coverage-tool save-report

      # 10. Сохраняем историю обратно в кеш
      - name: Cache Coverage  history
        if: always()
        uses: actions/cache/save@v4
        with:
          path: coverage-history.json
          key: coverage-history-${{ github.run_id }}

      # 11. Загружаем HTML-отчет как артефакт
      - name: Upload Coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      # 12. Сохраняем папку с результатами тестов как артефакт
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

  # 2 jobs: публикует отчет на GitHub Pages
  publish-report:
    needs: [ run-tests ]  # Запускается только после успешного завершения run-tests
    runs-on: ubuntu-latest

    steps:
      # 1. Снова клонируем репозиторий, чтобы получить доступ к файлам и ветке gh-pages
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages  # Указываем ветку gh-pages для получения отчётов
          path: gh-pages  # Указываем путь для сохранения отчётов

      # 2. Загружаем ранее сохранённый артефакт с результатами Allure
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # 3. Шаг для генерации и отображения отчёта Allure с историей
      - name: Generate Allure Report with history
        uses: simple-elf/allure-report-action@v1.12  # Используем GitHub Action для генерации Allure отчёта
        if: always()
        with:
          allure_results: allure-results  # Указываем каталог с результатами тестов
          allure_history: allure-history  # Указываем каталог для истории отчётов Allure

      # 4. Шаг для деплоя отчёта Allure на GitHub Pages, чтобы его можно было просматривать в браузере
      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4  # Используем GitHub Action для публикации отчёта на GitHub Pages
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для аутентификации на GitHub
          publish_branch: gh-pages  # Указываем, что отчёт будет опубликован в ветке gh-pages
          publish_dir: allure-history  # Указываем папку, которая будет опубликована на GitHub Pages